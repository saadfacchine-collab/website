{
  "version": 3,
  "sources": ["../../../../../../Users/saad/Documents/Cursor/Website/netlify/functions/convertkit-webhook-alt.js"],
  "sourceRoot": "/var/folders/61/g63dhf3n45sd6fwvp2hl_jr80000gn/T/tmp-45969-zomlxbZ3ZuJJ",
  "sourcesContent": ["const https = require('https');\n\nexports.handler = async (event, context) => {\n  // Only handle POST requests\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    // Debug: Log the incoming data\n    console.log('Event body:', event.body);\n    console.log('Content-Type:', event.headers['content-type']);\n    \n    // Parse the form data - Netlify forms send URL-encoded data\n    let formData;\n    if (event.headers['content-type'] && event.headers['content-type'].includes('application/json')) {\n      formData = JSON.parse(event.body);\n    } else {\n      // Parse URL-encoded form data\n      const params = new URLSearchParams(event.body);\n      formData = {};\n      for (const [key, value] of params) {\n        formData[key] = value;\n      }\n    }\n    \n    console.log('Parsed form data:', formData);\n    \n    // Check if this is a newsletter signup\n    if (formData['form-name'] === 'newsletter') {\n      const email = formData.email;\n      \n      // ConvertKit API configuration\n      const CONVERTKIT_API_KEY = process.env.CONVERTKIT_API_KEY;\n      const CONVERTKIT_FORM_ID = process.env.CONVERTKIT_FORM_ID;\n      \n      if (!CONVERTKIT_API_KEY || !CONVERTKIT_FORM_ID) {\n        console.error('ConvertKit configuration missing');\n        return {\n          statusCode: 500,\n          body: JSON.stringify({ error: 'Server configuration error' })\n        };\n      }\n      \n      // Add subscriber to ConvertKit using https module\n      const postData = JSON.stringify({\n        api_key: CONVERTKIT_API_KEY,\n        email: email,\n        first_name: '',\n        fields: {\n          source: 'website_newsletter'\n        }\n      });\n      \n      const options = {\n        hostname: 'api.convertkit.com',\n        port: 443,\n        path: `/v3/forms/${CONVERTKIT_FORM_ID}/subscribe`,\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Content-Length': Buffer.byteLength(postData)\n        }\n      };\n      \n      return new Promise((resolve, reject) => {\n        const req = https.request(options, (res) => {\n          let data = '';\n          \n          res.on('data', (chunk) => {\n            data += chunk;\n          });\n          \n          res.on('end', () => {\n            try {\n              const result = JSON.parse(data);\n              \n              if (res.statusCode >= 200 && res.statusCode < 300) {\n                console.log('Subscriber added to ConvertKit:', email);\n                resolve({\n                  statusCode: 200,\n                  body: JSON.stringify({ \n                    success: true, \n                    message: 'Subscriber added successfully' \n                  })\n                });\n              } else {\n                console.error('ConvertKit API error:', result);\n                resolve({\n                  statusCode: 400,\n                  body: JSON.stringify({ \n                    error: 'Failed to add subscriber',\n                    details: result \n                  })\n                });\n              }\n            } catch (error) {\n              console.error('Error parsing response:', error);\n              resolve({\n                statusCode: 500,\n                body: JSON.stringify({ error: 'Error parsing response' })\n              });\n            }\n          });\n        });\n        \n        req.on('error', (error) => {\n          console.error('Request error:', error);\n          resolve({\n            statusCode: 500,\n            body: JSON.stringify({ error: 'Request failed' })\n          });\n        });\n        \n        req.write(postData);\n        req.end();\n      });\n    }\n    \n    // For contact form submissions, just log them\n    if (formData['form-name'] === 'contact') {\n      console.log('Contact form submission:', {\n        name: formData.name,\n        email: formData.email,\n        subject: formData.subject,\n        message: formData.message\n      });\n      \n      return {\n        statusCode: 200,\n        body: JSON.stringify({ \n          success: true, \n          message: 'Contact form submitted successfully' \n        })\n      };\n    }\n    \n    return {\n      statusCode: 400,\n      body: JSON.stringify({ error: 'Unknown form type' })\n    };\n    \n  } catch (error) {\n    console.error('Function error:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ error: 'Internal server error' })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
